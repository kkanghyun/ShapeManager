//-----------------------------------------------------------------------------
// 찾아보고 알아볼 것
// 
//		- 다형성(Ploymorphism)이란 무엇인가?
//		- C++ 언어에서는 어떻게 다형성을 구현하는가?
//-----------------------------------------------------------------------------
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>
#include "Engine.h"

int main()
{
	// 메모리 릭 체크
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);

	// 이 프로그램은 프로젝트를 확인하기 위한 것이다.
	// 실습 순서대로 문제를 해결해 보자.
	Engine engine;
	if (not engine.init())
		return -1;

	engine.run();

	// 이 프로그램에서 잘못된 점을 찾을 수 있는가?
	// 잘못된 점을 어떻게 찾을 수 있는가?
	// 
	// -> 해당 문제를 기준으로 프로그램을 작성하고 진단하였습니다.
	//		1. 코드의 가독성이 뛰어난가?
	//		2. 장기적인 유지 보수가 가능한가?
	//		3. 최적화(메모리 관리 및 프로그램 성능)가 얼마나 잘 되어 있는가?


	// 11. Line이 잘 추가되었는가?
	// 전체 파일 중에서 Line이 추가됨에 따라 고쳐야 했던 파일은 어떤 것이었나?
	//		- 수정할 필요가 없는 파일이 있었는가?
	//			-> 다형성구현.cpp 및 Line을 제외한 다른 도형 파일
	//		- 수정할 부분이 있었다면 어느 파일의 어디였는가를 적어보라.
	//			-> class Line이 추가됨에 따라 enum class EShape에 LINE 플래그가 추가되었습니다.
	//			   그리고 해당 enum class를 사용하는 모든 switch 및 if 문을 수정해야만 했습니다.
	//		- 이 과정에서 어떤 점을 알 수 있었는가?
	//			-> enum class는 편하다. 하지만 플래그가 추가됨에 따라 유지보수에 불편함이 생긴다.


	// 12. 마지막으로 이 프로그램의 문제점과 감상 등을 정리해 보자.
	//  -> 각각의 도형 클래스마다 선언은 같지만 정의는 다른 오버라이딩된 함수들이 내포되어 있습니다.
	//	   장기적으로 보면 자식 클래스가 shape 클래스에 종속되어 유지 보수가 되려 불편할 수 있고 
	//	   프로그램이 무거워지는 문제가 발생할 수 있습니다.
	//     도형이 필요로 하는 기능을 정의한 컴포넌트 클래스를 만들고 각각의 도형 클래스가 필요한 컴포넌트를 
	//     가질 수 있게끔 만들면 보다 더 생산적으로 작업할 수 있을 것으로 생각됩니다.
}